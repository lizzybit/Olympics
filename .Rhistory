theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Distribution of Athlete Height",
x = "Height",
y = "Count")
boxplot(olympics$Age, main = "Age Distribution with Outliers",
boxwex = 0.5, ylim = c(0, 100),
outline = TRUE,
col = "lightblue",
pch = 19,
cex = 1.5)
ggplot(df, aes(y = age)) +
geom_boxplot(fill = "blue", outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
ggplot(olympics, aes(y = Age)) +
geom_boxplot(fill = "blue", outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
ggplot(olympics, aes(y = Age)) +
geom_boxplot(fill = "blue") +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
# Create a boxplot of age and highlight the outliers
ggplot(olympics, aes(y = Age)) +
geom_boxplot(fill = "lightblue") +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 5, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 20, outlier.size = 2) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 20, outlier.size = 5) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 20, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
xlim(0,0)
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age",
)
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "Age")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "",
y = "Age")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Wge)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Weight Distribution with Outliers",
x = "",
y = "Weight")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Weight)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Weight Distribution with Outliers",
x = "",
y = "Weight")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Weight)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Weight Distribution with Outliers",
x = "",
y = "Weight")+
scale_x_continuous(breaks = c())
## Age
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "",
y = "Age")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(x = Weight)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Distribution of Athlete Weight",
x = "Weight",
y = "Count")
ggplot(olympics, aes(y = Weight)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 220) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Weight Distribution with Outliers",
x = "",
y = "Weight")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Height)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 230) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Height Distribution with Outliers",
x = "",
y = "Height")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Height)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(120, 230) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Height Distribution with Outliers",
x = "",
y = "Height")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Height)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(120, 240) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Height Distribution with Outliers",
x = "",
y = "Height")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Height)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(120, 230) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Height Distribution with Outliers",
x = "",
y = "Height")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Weight)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(20, 220) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Weight Distribution with Outliers",
x = "",
y = "Weight")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Weight)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 220) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Weight Distribution with Outliers",
x = "",
y = "Weight")+
scale_x_continuous(breaks = c())
ggplot(olympics, aes(y = Height)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(120, 230) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Height Distribution with Outliers",
x = "",
y = "Height")+
scale_x_continuous(breaks = c())
###########################################################
###########################################################
## Download and install all required packages
library(readr)
library(sqldf)
library(calibrate)
library(repr)
library(tidyverse)
library(readxl)
library(knitr)
library(rmarkdown)
library(mice)
###########################################################
###########################################################
## Import data
setwd("/Users/elizabeth/Documents/GitHub/Olympics")
getwd()
olympics <- read.csv("athlete_events.csv", header = TRUE)
a <- head(olympics)
kable(a, format =  'markdown')
dim(olympics)
str(olympics)
# Build a list of columns that will be used for imputation
cols_to_impute = c('Year', 'Age', 'Height', 'Weight')
# Create an imputation model using mice
imputation_model <- mice(olympics[, cols_to_impute])
# Impute missing values
imputed_data <- complete(imputation_model)
# Assign the imputed data back to the original DataFrame's columns
olympics[, cols_to_impute] <- imputed_data[, cols_to_impute]
###########################################################
###########################################################
## Clean Data
# 1. Find null values
b <- colSums(is.na(olympics))
kable(b, format =  'markdown')
# 2. Fill the missing values in the column Medal with string of 'DNW'
olympics$Medal[is.na(olympics$Medal)] <- "DNW"
sum(is.na(olympics$Medal))
# 3. Replace missing values in height, weight and age using mice
# Build a list of columns that will be used for imputation
cols_to_impute = c('Year', 'Age', 'Height', 'Weight')
# Create an imputation model using mice
imputation_model <- mice(olympics[, cols_to_impute])
# Impute missing values
imputed_data <- complete(imputation_model)
# Assign the imputed data back to the original DataFrame's columns
olympics[, cols_to_impute] <- imputed_data[, cols_to_impute]
c <- colSums(is.na(olympics))
kable(c, format =  'markdown')
# 4. Drop unused games column as it contains data already found in year and season column
olympics$Games <- NULL
###########################################################
###########################################################
## Exploratory Data Analysis
# 1. Look at the statistical summary of the numeric columns:
summary(olympics)
d <- summary(olympics[, sapply(olympics, is.numeric)])
kable(d, format =  'markdown')
# Plot the histograms for the age, weight and height values:
## Age:
ggplot(olympics, aes(x = Age)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Distribution of Athlete Age",
x = "Age",
y = "Count")
## Weight:
ggplot(olympics, aes(x = Weight)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Distribution of Athlete Weight",
x = "Weight",
y = "Count")
## Height:
ggplot(olympics, aes(x = Height)) +
geom_histogram(binwidth = 3, fill = "blue", color = "black") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Distribution of Athlete Height",
x = "Height",
y = "Count")
# Create a boxplot of age and highlight the outliers
## Age
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "",
y = "Age")+
scale_x_continuous(breaks = c())
## Weight:
ggplot(olympics, aes(y = Weight)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 220) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Weight Distribution with Outliers",
x = "",
y = "Weight")+
scale_x_continuous(breaks = c())
## Height:
ggplot(olympics, aes(y = Height)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(120, 230) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Height Distribution with Outliers",
x = "",
y = "Height")+
scale_x_continuous(breaks = c())
a_q1 <- quantile(data$Age, 0.25)
a_q1 <- quantile(data$Age, 0.25)
a_q1 <- quantile(olympics$Age, 0.25)
a_q3 <- quantile(olympics$Age, 0.75)
a_iqr <- a_q3 - a_q1
a_small <- a_q1 - 1.5 * a_iqr
a_high <- a_q3 + 1.5 * a_iqr
a_small
a_high
w_q1 <- quantile(olympics$Weight, 0.25)
w_q3 <- quantile(olympics$Weight, 0.75)
w_iqr <- w_q3 - w_q1
w_small <- w_q1 - 1.5 * w_iqr
w_high <- w_q3 + 1.5 * w_iqr
w_small
w_high
h_q1 <- quantile(olympics$Height, 0.25)
h_q3 <- quantile(olympics$Height, 0.75)
h_iqr <- h_q3 - h_q1
h_small <- h_q1 - 1.5 * h_iqr
h_high <- h_q3 + 1.5 * h_iqr
h_small
h_high
a_small
a_high
w_small
w_high
h_small
h_high
young <- (olympics$Age < (a_q1 - 1.5 * a_iqr))
olympics$Sport[young]
olympics$Sport[young, "Sport"]
olympics$Sport[young]
a_q1 <- quantile(olympics$Age, 0.25)
a_q3 <- quantile(olympics$Age, 0.75)
a_iqr <- a_q3 - a_q1
a_small <- a_q1 - 1.5 * a_iqr
a_high <- a_q3 + 1.5 * a_iqr
a_small
a_high
View(a)
View(a)
View(olympics)
View(olympics)
light <- (olympics$Weight < (w_q1 - 1.5 * w_iqr))
olympics$Sport[light]
old <- (olympics$Age < (a_q1 + 1.5 * a_iqr))
old <- (olympics$Age < (a_q3 + 1.5 * a_iqr))
olympics$Sport[old]
a_small
a_high
###########################################################
###########################################################
## Download and install all required packages
library(readr)
library(sqldf)
library(calibrate)
library(repr)
library(tidyverse)
library(readxl)
library(knitr)
library(rmarkdown)
library(mice)
###########################################################
###########################################################
## Import data
setwd("/Users/elizabeth/Documents/GitHub/Olympics")
getwd()
olympics <- read.csv("athlete_events.csv", header = TRUE)
a <- head(olympics)
kable(a, format =  'markdown')
dim(olympics)
str(olympics)
# Build a list of columns that will be used for imputation
cols_to_impute = c('Year', 'Age', 'Height', 'Weight')
# Create an imputation model using mice
imputation_model <- mice(olympics[, cols_to_impute])
# Impute missing values
imputed_data <- complete(imputation_model)
# Assign the imputed data back to the original DataFrame's columns
olympics[, cols_to_impute] <- imputed_data[, cols_to_impute]
###########################################################
###########################################################
## Clean Data
# 1. Find null values
b <- colSums(is.na(olympics))
kable(b, format =  'markdown')
# 2. Fill the missing values in the column Medal with string of 'DNW'
olympics$Medal[is.na(olympics$Medal)] <- "DNW"
sum(is.na(olympics$Medal))
# 3. Replace missing values in height, weight and age using mice
# Build a list of columns that will be used for imputation
cols_to_impute = c('Year', 'Age', 'Height', 'Weight')
# Create an imputation model using mice
imputation_model <- mice(olympics[, cols_to_impute])
# Impute missing values
imputed_data <- complete(imputation_model)
# Assign the imputed data back to the original DataFrame's columns
olympics[, cols_to_impute] <- imputed_data[, cols_to_impute]
c <- colSums(is.na(olympics))
kable(c, format =  'markdown')
# 4. Drop unused games column as it contains data already found in year and season column
olympics$Games <- NULL
###########################################################
###########################################################
## Exploratory Data Analysis
# 1. Look at the statistical summary of the numeric columns:
summary(olympics)
d <- summary(olympics[, sapply(olympics, is.numeric)])
kable(d, format =  'markdown')
# Plot the histograms for the age, weight and height values:
## Age:
ggplot(olympics, aes(x = Age)) +
geom_histogram(binwidth = 1, fill = "blue", color = "black") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Distribution of Athlete Age",
x = "Age",
y = "Count")
## Weight:
ggplot(olympics, aes(x = Weight)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Distribution of Athlete Weight",
x = "Weight",
y = "Count")
## Height:
ggplot(olympics, aes(x = Height)) +
geom_histogram(binwidth = 3, fill = "blue", color = "black") +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Distribution of Athlete Height",
x = "Height",
y = "Count")
# Create a boxplot of age and highlight the outliers
## Age
ggplot(olympics, aes(y = Age)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 100) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Age Distribution with Outliers",
x = "",
y = "Age")+
scale_x_continuous(breaks = c())
## Weight:
ggplot(olympics, aes(y = Weight)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(0, 220) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Weight Distribution with Outliers",
x = "",
y = "Weight")+
scale_x_continuous(breaks = c())
## Height:
ggplot(olympics, aes(y = Height)) +
geom_boxplot(outlier.shape = 19, outlier.size = 3) +
ylim(120, 230) +
theme(plot.title = element_text(hjust = 0.5))+
labs(title = "Height Distribution with Outliers",
x = "",
y = "Height")+
scale_x_continuous(breaks = c())
young <- (olympics$Age < (a_q1 - 1.5 * a_iqr))
a_q1 <- quantile(olympics$Age, 0.25)
a_q3 <- quantile(olympics$Age, 0.75)
a_iqr <- a_q3 - a_q1
a_small <- a_q1 - 1.5 * a_iqr
a_high <- a_q3 + 1.5 * a_iqr
a_small
a_high
w_q1 <- quantile(olympics$Weight, 0.25)
w_q3 <- quantile(olympics$Weight, 0.75)
w_iqr <- w_q3 - w_q1
w_small <- w_q1 - 1.5 * w_iqr
w_high <- w_q3 + 1.5 * w_iqr
w_small
w_high
h_q1 <- quantile(olympics$Height, 0.25)
h_q3 <- quantile(olympics$Height, 0.75)
h_iqr <- h_q3 - h_q1
h_small <- h_q1 - 1.5 * h_iqr
h_high <- h_q3 + 1.5 * h_iqr
h_small
h_high
young <- (olympics$Age < (a_q1 - 1.5 * a_iqr))
olympics$Sport[young]
## Find the sport(s) with the oldest athletes:
old <- (olympics$Age < (a_q3 + 1.5 * a_iqr))
olympics$Sport[old]
olympics[young, "Sport"] %>% table()
olympics[old, "Sport"] %>% table()
light <- (olympics$Weight < (w_q1 - 1.5 * w_iqr))
olympics$Sport[light]
light <- (olympics$Weight < (w_q1 - 1.5 * w_iqr))
olympics$Sport[light]
olympics[light, "Sport"] %>% table()
heavy <- (olympics$Weight < (w_q3 + 1.5 * w_iqr))
olympics$Sport[heavy]
olympics[heavy, "Sport"] %>% table()
short <- (olympics$Height < (h_q1 - 1.5 * h_iqr))
olympics$Sport[short]
olympics[short, "Sport"] %>% table()
tall <- (olympics$Height < (h_q3 + 1.5 * h_iqr))
olympics$Sport[tall]
olympics[tall, "Sport"] %>% table()
unique_counts <- sapply(olympics, function(x) length(unique(x)))
print(unique_counts)
summary(olympics[,sapply(olympics, is.character)])
